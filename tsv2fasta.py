import argparse
import pandas as pd
from Bio import SeqIO
from Bio.Seq import Seq
from Bio.SeqRecord import SeqRecord
from pathlib import Path


PROG = 'tsv2fasta'
DESCRIPTION = "Convert tsv result files generated by μProteInS (https://github.com/Eduardo-vsouza/uproteins) into fasta files."  # noqa: E501
EPILOG = "The input file will not be validated by the script. Make sure it is a valid μProteInS result file, or the program may crash or fail silently."  # noqa: E501

parser = argparse.ArgumentParser(prog=PROG, description=DESCRIPTION, epilog=EPILOG)   # noqa: E501

parser.add_argument('input', help='input file, should be a results file from μProteInS', type=Path)  # noqa: E501
parser.add_argument('-o', '--output', help='output file name, default is the input file name with fasta extension', type=Path)  # noqa: E501
parser.add_argument('-d', '--dir', help='output directory, default is .\\results', default=Path('.\\results'), type=Path)   # noqa: E501


def main(args):
    input: Path = args['input']
    if not (input.exists() and input.is_file()):
        parser.error(f'the input is not valid file: {input}')

    output_file: Path | None = args['output']
    if output_file is None:
        output_file = Path(input.with_suffix('.fasta').name)

    output_directory: Path = args['dir']
    try:
        output_directory.mkdir(exist_ok=True)
    except FileExistsError as e:
        parser.error(e)
    output_path = output_directory.joinpath(output_file)

    parse_to_SeqRecord(input)
    with open(output_path, 'w') as output:
        SeqIO.write(parse_to_SeqRecord(input), output, 'fasta')


def parse_to_SeqRecord(input):
    table = pd.read_csv(
        input,
        sep='\t',
    ).rename(columns=lambda name: name.replace(' ', '_'))

    for item in table.itertuples():
        yield SeqRecord(
            id=f'{item.ORF_name}.{item.Index}',
            seq=Seq(item.Protein_sequence),
            description=f'file {item.SpecFile}; '
                        f'scanNum {item.ScanNum}; '
                        f'coordinates {item.Genome_Coordinates}; '
                        f'peptide {item.Peptide}'
        )


if __name__ == '__main__':
    main(vars(parser.parse_args()))
